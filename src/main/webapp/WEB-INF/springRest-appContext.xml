<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:datagraph="http://www.springframework.org/schema/data/graph"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/data/graph http://www.springframework.org/schema/data/graph/datagraph-1.0.xsd
		http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


	<!-- spring based declarative transaction management -->
	<!-- <tx:annotation-driven transaction-manager="txManager" />
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" timeout="180"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" timeout="180"/>
			<tx:method name="processPaymentSplitApiResponse" propagation="REQUIRES_NEW" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut expression="execution(* com.mysoftkey.springrest.service.impl.*.*(..))"
			id="dataBaseOperation"></aop:pointcut>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="dataBaseOperation"></aop:advisor>
	</aop:config>
 -->
	<!-- property configurer -->
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property  name="location" value="file:/opt/apache/tomcat7/bin/pb/pgi-config.properties"/>
 	</bean> -->

	<!-- Configures the @Controller programming model -->
	<context:component-scan base-package="com.mysoftkey.springrest"  />

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources/ directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="com.policybazaar.pgi.exception.PGIServiceException">PGIException</prop>
			</props>
		</property>
	</bean> -->

	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- <bean id="mongoClient" class="com.policybazaar.pgi.dao.AppMongoDao" init-method="init">
		<property name="host" value="${mongo.host}"/>
		<property name="dbName" value="${mongo.db}"/>
		<property name="portNo" value="${mongo.port}"/>
		<property name="userName" value="${mongo.userName}"/>
		<property name="password" value="${mongo.password}"/>
		<property name="connectionsPerHost" value="${mongo.connectionsPerHost}"/>
		<property name="socketTimeOut" value="${mongo.socketTimeout}"/>
		<property name="connectionTimeOut" value="${mongo.connectiontimeout}"/>
	</bean> -->


	<!-- This is to send mail -->
	<!-- <bean id="mailSenderService" class="com.policybazaar.pgi.service.impl.MailSenderServiceImpl">
		<constructor-arg index="0" value="${email.smtp.host}" />
		<constructor-arg index="1" value="${email.from.emailId}" />
		<constructor-arg index="2" value="${email.return.path}" />
		<constructor-arg index="3" value="${email.replyTo.emailId}" />
	</bean> -->
	
	<!-- <task:annotation-driven executor="asyncExecuter"  />
	<task:executor id="asyncExecuter" pool-size="5-25" queue-capacity="100" keep-alive="120"/>
	
 -->
   

</beans>
